"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[294],{433:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/mobx-chunk/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Create Chunk","href":"/mobx-chunk/docs/concepts/create-chunk","docId":"concepts/create-chunk","unlisted":false},{"type":"link","label":"Subscribe to Changes","href":"/mobx-chunk/docs/concepts/subscribe-to-changes","docId":"concepts/subscribe-to-changes","unlisted":false},{"type":"link","label":"Persistence Setup","href":"/mobx-chunk/docs/concepts/persistence","docId":"concepts/persistence","unlisted":false},{"type":"link","label":"Middleware Setup","href":"/mobx-chunk/docs/concepts/middleware","docId":"concepts/middleware","unlisted":false}],"href":"/mobx-chunk/docs/category/concepts"},{"type":"category","label":"API","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"API: createChunk","href":"/mobx-chunk/docs/api/createChunk","docId":"api/createChunk","unlisted":false},{"type":"link","label":"API: useChunk","href":"/mobx-chunk/docs/api/useChunk","docId":"api/useChunk","unlisted":false},{"type":"link","label":"API: useValues","href":"/mobx-chunk/docs/api/useValues","docId":"api/useValues","unlisted":false},{"type":"link","label":"API: useComputed","href":"/mobx-chunk/docs/api/useComputed","docId":"api/useComputed","unlisted":false},{"type":"link","label":"API: combineAsync","href":"/mobx-chunk/docs/api/combineAsync","docId":"api/combineAsync","unlisted":false},{"type":"link","label":"API: useStoreInitialized","href":"/mobx-chunk/docs/api/useStoreInitialized","docId":"api/useStoreInitialized","unlisted":false},{"type":"link","label":"API: configurePersistenceEngine","href":"/mobx-chunk/docs/api/configurePersistenceEngine","docId":"api/configurePersistenceEngine","unlisted":false},{"type":"link","label":"API: addActionInterceptor","href":"/mobx-chunk/docs/api/addActionInterceptor","docId":"api/addActionInterceptor","unlisted":false}],"href":"/mobx-chunk/docs/category/api"}]},"docs":{"api/addActionInterceptor":{"id":"api/addActionInterceptor","title":"API: addActionInterceptor","description":"Register a global middleware function that intercepts chunk actions and async actions. Useful for validation, logging, or performance tracking.","sidebar":"tutorialSidebar"},"api/combineAsync":{"id":"api/combineAsync","title":"API: combineAsync","description":"Utility for merging multiple builder functions into a single flat API of asynchronous methods. Each builder receives a shared context (self) and returns an object of async functions; combineAsync binds them into one API, preserving original signatures.","sidebar":"tutorialSidebar"},"api/configurePersistenceEngine":{"id":"api/configurePersistenceEngine","title":"API: configurePersistenceEngine","description":"Global configuration for persisting state fields in mobx-chunk. Plug any storage engine by providing CRUD methods for string-based keys and values.","sidebar":"tutorialSidebar"},"api/createChunk":{"id":"api/createChunk","title":"API: createChunk","description":"Define a self-contained, type-safe MobX store slice (\\"chunk\\") with optional custom logic, persistence, and async support.","sidebar":"tutorialSidebar"},"api/useChunk":{"id":"api/useChunk","title":"API: useChunk","description":"React hook for creating and managing a local MobX chunk store instance for the lifetime of a component.","sidebar":"tutorialSidebar"},"api/useComputed":{"id":"api/useComputed","title":"API: useComputed","description":"React hook for subscribing to a single MobX chunk-derived value or loading flag. Re-renders your component when the selected value changes.","sidebar":"tutorialSidebar"},"api/useStoreInitialized":{"id":"api/useStoreInitialized","title":"API: useStoreInitialized","description":"React hook to defer rendering until specified MobX store instances are initialized. Returns a boolean flag that toggles from false to true immediately after the provided stores are referenced on component mount.","sidebar":"tutorialSidebar"},"api/useValues":{"id":"api/useValues","title":"API: useValues","description":"React hook for batch-subscribing to multiple MobX chunk-derived values in one call. Re-renders your component when any selected value changes.","sidebar":"tutorialSidebar"},"concepts/create-chunk":{"id":"concepts/create-chunk","title":"Create Chunk","description":"The createChunk function is the heart of mobx-chunk, allowing you to define a type-safe store slice (\\"chunk\\") with minimal boilerplate. It automatically generates actions, selectors, async actions, and loading flags based on your configuration and custom definitions.","sidebar":"tutorialSidebar"},"concepts/middleware":{"id":"concepts/middleware","title":"Middleware Setup","description":"mobx-chunk supports action interceptors\u2014middleware functions that run before or after your custom actions and async flows. Use them to add validation, logging, performance monitoring, or any cross-cutting concerns.","sidebar":"tutorialSidebar"},"concepts/persistence":{"id":"concepts/persistence","title":"Persistence Setup","description":"To persist store fields across sessions, mobx-chunk lets you plug in any storage engine via configurePersistenceEngine. Below are examples for React Native (MMKV, AsyncStorage) and web (localStorage).","sidebar":"tutorialSidebar"},"concepts/subscribe-to-changes":{"id":"concepts/subscribe-to-changes","title":"Subscribe to Changes","description":"mobx-chunk provides easy-to-use React hooks to reactively subscribe to store changes and keep your components in sync.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Welcome to mobx-chunk, a lightweight, type-safe factory for building MobX-powered state slices (\\"chunks\\") with minimal boilerplate. Whether you\u2019re managing simple local state or complex asynchronous flows, mobx-chunk helps you stay organized and scalable.","sidebar":"tutorialSidebar"}}}}')}}]);