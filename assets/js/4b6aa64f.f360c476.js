"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[77],{3934:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api/configurePersistenceEngine","title":"API: configurePersistenceEngine","description":"Global configuration for persisting state fields in mobx-chunk. Plug any storage engine by providing CRUD methods for string-based keys and values.","source":"@site/docs/api/configurePersistenceEngine.md","sourceDirName":"api","slug":"/api/configurePersistenceEngine","permalink":"/mobx-chunk/docs/api/configurePersistenceEngine","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"API: withStore","permalink":"/mobx-chunk/docs/api/withStore"},"next":{"title":"API: addActionInterceptor","permalink":"/mobx-chunk/docs/api/addActionInterceptor"}}');var r=i(4848),t=i(8453);const o={sidebar_position:6},c="API: configurePersistenceEngine",a={},d=[{value:"<code>PersistenceEngine</code> Interface",id:"persistenceengine-interface",level:2},{value:"Usage",id:"usage",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Return Value",id:"return-value",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"api-configurepersistenceengine",children:["API: ",(0,r.jsx)(n.code,{children:"configurePersistenceEngine"})]})}),"\n",(0,r.jsxs)(n.p,{children:["Global configuration for persisting state fields in ",(0,r.jsx)(n.strong,{children:"mobx-chunk"}),". Plug any storage engine by providing CRUD methods for string-based keys and values."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function configurePersistenceEngine(\n  engine: PersistenceEngine\n): void\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"persistenceengine-interface",children:[(0,r.jsx)(n.code,{children:"PersistenceEngine"})," Interface"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface PersistenceEngine {\n  /**\n   * Clear all stored entries or scoped entries if key provided.\n   * @param key Optional prefix or specific key to clear.\n   * */\n  clear: (key?: string) => void | Promise<void>;\n\n  /**\n   * Retrieve a stored string by key.\n   * Returns either a string or a promise resolving to a string or null.\n   */\n  get: (key: string) => string | Promise<string | null>;\n\n  /**\n   * Remove a stored entry by key.\n   */\n  remove: (key: string) => void | Promise<void>;\n\n  /**\n   * Store a string value under a key.\n   */\n  set: (key: string, value: string) => void | Promise<void>;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:["Call ",(0,r.jsx)(n.code,{children:"configurePersistenceEngine"})," once, preferably in your app\u2019s root or entry point before any ",(0,r.jsx)(n.code,{children:"createChunk"})," calls that use ",(0,r.jsx)(n.code,{children:"persist"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { configurePersistenceEngine } from "mobx-chunk";\n\n// Example: React Native MMKV\nimport { MMKV } from "react-native-mmkv";\nconst storage = new MMKV();\n\nconfigurePersistenceEngine({\n  clear: () => storage.clearAll(),\n  get:    (key) => storage.getString(key),\n  remove: (key) => storage.delete(key),\n  set:    (key, value) => storage.set(key, value),\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Read on Initialization"}),": When a chunk with ",(0,r.jsx)(n.code,{children:"persist"})," fields is created, stored values are read automatically and merged into the initial state."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Write on Change"}),": Whenever a ",(0,r.jsx)(n.code,{children:"set${Field}"})," action updates a persisted field, the new value is serialized and saved via ",(0,r.jsx)(n.code,{children:"engine.set"})," under a composed key: ",(0,r.jsx)(n.code,{children:"${chunkName}:${field}"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Remove on Deletion"}),": If a persisted field is removed (e.g., set to ",(0,r.jsx)(n.code,{children:"undefined"}),"), ",(0,r.jsx)(n.code,{children:"engine.remove"})," is called for the key."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clear All"}),": Calling ",(0,r.jsx)(n.code,{children:"engine.clear()"})," purges all keys. Some engines support namespaced clearing by passing a prefix."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"void"})," \u2014 there\u2019s no return. After configuration, the engine is used under the hood by persisted chunks."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"configurePersistenceEngine"})," to integrate any storage solution (synchronous or asynchronous) for persisted fields across sessions."]})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var s=i(6540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);