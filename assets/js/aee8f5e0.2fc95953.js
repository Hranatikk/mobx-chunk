"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[294],{433:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/mobx-chunk/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Create Chunk","href":"/mobx-chunk/docs/concepts/create-chunk","docId":"concepts/create-chunk","unlisted":false},{"type":"link","label":"Subscribe to Changes","href":"/mobx-chunk/docs/concepts/subscribe-to-changes","docId":"concepts/subscribe-to-changes","unlisted":false},{"type":"link","label":"Persistence Setup","href":"/mobx-chunk/docs/concepts/persistence","docId":"concepts/persistence","unlisted":false},{"type":"link","label":"Middleware Setup","href":"/mobx-chunk/docs/concepts/middleware","docId":"concepts/middleware","unlisted":false},{"type":"link","label":"withStore HOC","href":"/mobx-chunk/docs/concepts/with-store","docId":"concepts/with-store","unlisted":false}],"href":"/mobx-chunk/docs/category/concepts"},{"type":"category","label":"API","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"addActionInterceptor","href":"/mobx-chunk/docs/api/addActionInterceptor","docId":"api/addActionInterceptor","unlisted":false},{"type":"link","label":"Annotations","href":"/mobx-chunk/docs/api/annotations","docId":"api/annotations","unlisted":false},{"type":"link","label":"configurePersistenceEngine","href":"/mobx-chunk/docs/api/configurePersistenceEngine","docId":"api/configurePersistenceEngine","unlisted":false},{"type":"link","label":"createChunk","href":"/mobx-chunk/docs/api/createChunk","docId":"api/createChunk","unlisted":false}],"href":"/mobx-chunk/docs/category/api"}]},"docs":{"api/addActionInterceptor":{"id":"api/addActionInterceptor","title":"addActionInterceptor","description":"Register a global action interceptor.","sidebar":"tutorialSidebar"},"api/annotations":{"id":"api/annotations","title":"Annotations","description":"Decorators for actions and computed values.","sidebar":"tutorialSidebar"},"api/configurePersistenceEngine":{"id":"api/configurePersistenceEngine","title":"configurePersistenceEngine","description":"Set the global persistence engine.","sidebar":"tutorialSidebar"},"api/createChunk":{"id":"api/createChunk","title":"createChunk","description":"Factory for creating a new chunk.","sidebar":"tutorialSidebar"},"concepts/create-chunk":{"id":"concepts/create-chunk","title":"Create Chunk","description":"The createChunk function is the heart of mobx-chunk, allowing you to define a type-safe store slice (\\"chunk\\") with minimal boilerplate. It automatically generates actions, selectors, async actions, and loading flags based on your configuration and custom definitions.","sidebar":"tutorialSidebar"},"concepts/middleware":{"id":"concepts/middleware","title":"Middleware Setup","description":"mobx-chunk supports action interceptors\u2014middleware functions that run before or after your custom actions and async flows. Use them to add validation, logging, performance monitoring, or any cross-cutting concerns.","sidebar":"tutorialSidebar"},"concepts/persistence":{"id":"concepts/persistence","title":"Persistence Setup","description":"To persist store fields across sessions, mobx-chunk lets you plug in any storage engine via configurePersistenceEngine. Below are examples for React Native (MMKV, AsyncStorage) and web (localStorage).","sidebar":"tutorialSidebar"},"concepts/subscribe-to-changes":{"id":"concepts/subscribe-to-changes","title":"Subscribe to Changes","description":"mobx-chunk provides easy-to-use React hooks to reactively subscribe to store changes and keep your components in sync.","sidebar":"tutorialSidebar"},"concepts/with-store":{"id":"concepts/with-store","title":"withStore HOC","description":"Use the withStore higher-order component (HOC) to create a local MobX chunk instance for a specific component or screen. The local store is automatically created when the component mounts and disposed when it unmounts.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Welcome to mobx-chunk, a lightweight, type-safe factory for building MobX-powered state slices (\\"chunks\\") with minimal boilerplate. Whether you\u2019re managing simple local state or complex asynchronous flows, mobx-chunk helps you stay organized and scalable.","sidebar":"tutorialSidebar"}}}}')}}]);