"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[55],{6583:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"api/useValues","title":"API: useValues","description":"React hook for batch-subscribing to multiple MobX chunk-derived values in one call. Re-renders your component when any selected value changes.","source":"@site/docs/api/useValues.md","sourceDirName":"api","slug":"/api/useValues","permalink":"/mobx-chunk/docs/api/useValues","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"API: createChunk","permalink":"/mobx-chunk/docs/api/createChunk"},"next":{"title":"API: useComputed","permalink":"/mobx-chunk/docs/api/useComputed"}}');var r=s(4848),t=s(8453);const a={sidebar_position:2},l="API: useValues",i={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Example",id:"example",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"api-usevalues",children:["API: ",(0,r.jsx)(n.code,{children:"useValues"})]})}),"\n",(0,r.jsx)(n.p,{children:"React hook for batch-subscribing to multiple MobX chunk-derived values in one call. Re-renders your component when any selected value changes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function useValues<Selectors extends Record<string, (() => any) | any>>(\n  getters: Selectors\n): { [K in keyof Selectors]: Selectors[K] extends () => infer R ? R : Selectors[K] }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"selectors"}),": An object whose keys are local variable names and values are functions returning the desired store value or loading flag."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Each function should return a value from ",(0,r.jsx)(n.code,{children:"store.selectors"}),", ",(0,r.jsx)(n.code,{children:"store.isLoading"}),", or any computed expression."]}),"\n",(0,r.jsx)(n.li,{children:"Executed once on render to subscribe, and again whenever the underlying observable changes."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsxs)(n.p,{children:["An object mapping the same keys as the ",(0,r.jsx)(n.code,{children:"selectors"})," input to the current values:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const values = useValues({\n  foo: () => store.selectors.getFoo,\n  bar: () => store.isLoading.fetchData,\n});\n// values: { foo: string; bar: boolean }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Subscribes to all provided selectors in a single hook."}),"\n",(0,r.jsx)(n.li,{children:"Batches updates: your component will re-render once even if multiple values change."}),"\n",(0,r.jsx)(n.li,{children:"Unsubscribes automatically on unmount."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { useValues } from "mobx-chunk";\nimport { todoStore } from "./todo-store";\n\nconst TodoList = () => {\n  const { todos, loading } = useValues({\n    todos: () => todoStore.selectors.getTodoList,\n    loading: () => todoStore.isLoading.fetchTodos,\n  });\n\n  if (loading) {\n    return <LoadingSpinner />;\n  }\n\n  return (\n    <ul>\n      {todos.map(todo => (\n        <li key={todo.id}>{todo.title}</li>\n      ))}\n    </ul>\n  );\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"useValues"})," when you need multiple reactive values in a component without separate hook calls for each."]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var o=s(6540);const r={},t=o.createContext(r);function a(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);