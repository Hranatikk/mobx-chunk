"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[590],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(6540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}},9713:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"tutorial-basics/store-creation","title":"Store creation","description":"A quick tour of the essential steps when working with mobx-chunk\u2014from defining state to wiring up async logic.","source":"@site/docs/tutorial-basics/store-creation.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/store-creation","permalink":"/mobx-chunk/docs/tutorial-basics/store-creation","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Basic usage","permalink":"/mobx-chunk/docs/category/basic-usage"},"next":{"title":"Subscribe to changes","permalink":"/mobx-chunk/docs/tutorial-basics/subscribe-to-changes"}}');var o=t(4848),r=t(8453);const i={sidebar_position:1},c="Store creation",a={},d=[{value:"Creating a store",id:"creating-a-store",level:2},{value:"Creating actions",id:"creating-actions",level:2},{value:"Creating async actions",id:"creating-async-actions",level:2},{value:"Using views (custom selectors)",id:"using-views-custom-selectors",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"store-creation",children:"Store creation"})}),"\n",(0,o.jsxs)(n.p,{children:["A quick tour of the essential steps when working with ",(0,o.jsx)(n.strong,{children:"mobx-chunk"}),"\u2014from defining state to wiring up async logic."]}),"\n",(0,o.jsx)(n.h2,{id:"creating-a-store",children:"Creating a store"}),"\n",(0,o.jsxs)(n.p,{children:["Declare your data structure and computed views in a single, declarative object. ",(0,o.jsx)(n.strong,{children:"mobx-chunk"})," generates all the wiring for you."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'// store.ts\nimport { createChunk } from "mobx-chunk"\nimport { actions, type TActions } from "./actions"\nimport { asyncActions, type TAsyncActions } from "./asyncActions"\nimport { selectors, type TSelectors } from "./selectors"\n\nexport type TState = {\n  token: string\n}\nexport const authStore = createChunk<\n  TState,\n  TActions,\n  TAsyncActions,\n  TSelectors\n>({\n  initialState: {\n    token: "",\n  } satisfies TState,\n  name: "authStore",\n\n  actions,\n  asyncActions,\n  views: selectors,\n})\n\nexport type TAuthStore = typeof authStore\n'})}),"\n",(0,o.jsx)(n.h2,{id:"creating-actions",children:"Creating actions"}),"\n",(0,o.jsxs)(n.p,{children:["Add synchronous methods for atomic state updates. Every action is wrapped in ",(0,o.jsx)(n.code,{children:"runInAction"}),", ensuring data stays consistent."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'// actions.ts\nimport type { TState } from "./chunk"\n\nexport function actions<Store extends TState>(store: Store) {\n  return {\n    changeToken(token: string) {\n      store.token = String(Date.now())\n    },\n  }\n}\nexport type TActions = ReturnType<typeof actions>\n'})}),"\n",(0,o.jsx)(n.h2,{id:"creating-async-actions",children:"Creating async actions"}),"\n",(0,o.jsxs)(n.p,{children:["Describe long-running operations as generator flows or ",(0,o.jsx)(n.code,{children:"async/await"})," functions. Each one automatically gains an ",(0,o.jsx)(n.code,{children:"isLoading.<name>"})," flag so you can track its progress in the UI."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'// asyncActions.ts\nimport type { TState } from "./chunk"\n\nexport function asyncActions<Store extends TState>(store: Store) {\n  return {\n    // using async/await\n    async asyncFunc() {\n      await new Promise<void>((resolve) =>\n        setTimeout(() => {\n          store.token = String(Date.now())\n          resolve()\n        }, 7000)\n      )\n    },\n\n    // using generators\n    *asyncGenerator() {\n      yield new Promise<void>((resolve) =>\n        setTimeout(() => {\n          store.token = String(Date.now())\n          resolve()\n        }, 7000)\n      )\n    },\n  }\n}\n\nexport type TAsyncActions = ReturnType<typeof asyncActions>\n'})}),"\n",(0,o.jsx)(n.h2,{id:"using-views-custom-selectors",children:"Using views (custom selectors)"}),"\n",(0,o.jsxs)(n.p,{children:["Need more than predefined ",(0,o.jsx)(n.code,{children:"computed"})," fields? Combine any slice of state on demand with ",(0,o.jsx)(n.strong,{children:"views"}),". Pass a selector to ",(0,o.jsx)(n.code,{children:"useComputed"})," (or call ",(0,o.jsx)(n.code,{children:".view()"})," inside another store) to get a memoised, reactive value without adding extra fields to the store definition."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'// selectors.ts (or views.ts)\nimport type { TState } from "./chunk"\n\nexport function selectors(store: TState) {\n  return {\n    isAuthenticated(): boolean {\n      return Boolean(store.token)\n    },\n  }\n}\nexport type TSelectors = ReturnType<typeof selectors>\n\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);