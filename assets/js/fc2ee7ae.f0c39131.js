"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[887],{733:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api/combineAsync","title":"API: combineAsync","description":"Utility for merging multiple builder functions into a single flat API of asynchronous methods. Each builder receives a shared context (self) and returns an object of async functions; combineAsync binds them into one API, preserving original signatures.","source":"@site/docs/api/combineAsync.md","sourceDirName":"api","slug":"/api/combineAsync","permalink":"/mobx-chunk/docs/api/combineAsync","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"API: withStore","permalink":"/mobx-chunk/docs/api/withStore"},"next":{"title":"API: useStoreInitialized","permalink":"/mobx-chunk/docs/api/useStoreInitialized"}}');var r=s(4848),o=s(8453);const t={sidebar_position:5},c="API: combineAsync",a={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Example",id:"example",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"api-combineasync",children:["API: ",(0,r.jsx)(n.code,{children:"combineAsync"})]})}),"\n",(0,r.jsxs)(n.p,{children:["Utility for merging multiple builder functions into a single flat API of asynchronous methods. Each builder receives a shared context (",(0,r.jsx)(n.code,{children:"self"}),") and returns an object of async functions; ",(0,r.jsx)(n.code,{children:"combineAsync"})," binds them into one API, preserving original signatures."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function combineAsync<\n  T extends Record<string, (self: any) => Record<string, (...args: any[]) => Promise<any>>>\n>(\n  builders: T,\n  store: any\n): CombinedAsync<T>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"builders"})," (",(0,r.jsx)(n.code,{children:"T"}),"):\nA record of builder functions. Each builder is ",(0,r.jsx)(n.code,{children:"(self: any) => Record<string, (...args: any[]) => Promise<any>>"}),", returning an object of async methods."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"store"})," (",(0,r.jsx)(n.code,{children:"any"}),"):\nThe shared ",(0,r.jsx)(n.code,{children:"self"})," object passed to every builder."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Returns ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"CombinedAsync<T>"})})," \u2014 an object combining all async methods from each builder. Each method has signature ",(0,r.jsx)(n.code,{children:"(...args: OriginalParameters) => Promise<OriginalReturnType>"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Iterates over all keys in ",(0,r.jsx)(n.code,{children:"builders"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Calls each builder with ",(0,r.jsx)(n.code,{children:"store"})," to retrieve its methods."]}),"\n",(0,r.jsx)(n.li,{children:"Exposes each async method on the result object, forwarding arguments and return value."}),"\n",(0,r.jsxs)(n.li,{children:["Methods remain bound to the provided ",(0,r.jsx)(n.code,{children:"store"})," and preserve their ",(0,r.jsx)(n.code,{children:"Promise"}),"-based return types."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// userApi.ts\nimport type { TState } from \"../chunk\"\n\nexport const userApi = (store: TState) => ({\n  async fetchUser(id: number) {\n    // your async code\n  },\n  async updateUser(user: User) {\n    // your async code\n  },\n})\n\n// postApi.ts\nexport const postApi = (store: TState) => ({\n  async fetchPost(id: number) {\n    // your async code\n  },\n})\n\n// api.ts\nimport { combineAsync } from 'mobx-chunk'\nimport { userApi } from './userApi'\nimport { postApi } from './postApi'\n\nconst asyncActions = combineAsync({ userApi, postApi })\n\nexport const exampleStore = createChunk<\n  {},\n  {},\n  TAsyncActions,\n  {}\n>({\n  initialState: {} satisfies TState,\n  name: \"example\",\n\n  asyncActions,\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"combineAsync"})," when you need to unify multiple asynchronous modules under a common store without shadowing individual method signatures."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var i=s(6540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);