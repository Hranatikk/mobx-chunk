"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[257],{5001:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"tutorial-basics/subscribe-to-changes","title":"Subscribe to changes","description":"Track updates effortlessly\u2014mobx-chunk turns each store into an observable source that your components re-render from automatically.","source":"@site/docs/tutorial-basics/subscribe-to-changes.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/subscribe-to-changes","permalink":"/mobx-chunk/docs/tutorial-basics/subscribe-to-changes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Store creation","permalink":"/mobx-chunk/docs/tutorial-basics/store-creation"},"next":{"title":"Create a Blog Post","permalink":"/mobx-chunk/docs/tutorial-basics/create-a-blog-post"}}');var t=n(4848),r=n(8453);const i={sidebar_position:2},c="Subscribe to changes",a={},l=[{value:"Overview",id:"overview",level:2},{value:"React hooks",id:"react-hooks",level:2},{value:"<code>useValues</code>",id:"usevalues",level:3},{value:"<code>useComputed</code>",id:"usecomputed",level:3},{value:"<code>isLoading</code> flags",id:"isloading-flags",level:3},{value:"Best practices",id:"best-practices",level:2}];function d(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"subscribe-to-changes",children:"Subscribe to changes"})}),"\n",(0,t.jsxs)(s.p,{children:["Track updates effortlessly\u2014",(0,t.jsx)(s.strong,{children:"mobx-chunk"})," turns each store into an observable source that your components re-render from automatically."]}),"\n",(0,t.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(s.p,{children:"Reactivity is built in. Choose from purpose-built React hooks to stay in sync with your data while keeping components lean."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"react-hooks",children:"React hooks"}),"\n",(0,t.jsx)(s.h3,{id:"usevalues",children:(0,t.jsx)(s.code,{children:"useValues"})}),"\n",(0,t.jsx)(s.p,{children:"Pick any state or computed fields; the component re-renders only when those values actually change."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'// Inside React component \n\nimport { useValues } from "mobx-chunk"\n\nconst { bar, baz } = useValues({\n  bar: () => barStore.bar,\n  baz: () => bazStore.baz,\n})\n'})}),"\n",(0,t.jsx)(s.h3,{id:"usecomputed",children:(0,t.jsx)(s.code,{children:"useComputed"})}),"\n",(0,t.jsx)(s.p,{children:"Pass a custom selector to derive a memoised value on demand\u2014perfect for ad-hoc calculations without polluting the store definition."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'// Inside React component \n\nimport { useComputed } from "mobx-chunk"\n\nconst token = useComputed(() => authStore.token)\n'})}),"\n",(0,t.jsxs)(s.h3,{id:"isloading-flags",children:[(0,t.jsx)(s.code,{children:"isLoading"})," flags"]}),"\n",(0,t.jsxs)(s.p,{children:["Every async flow automatically exposes an ",(0,t.jsx)(s.code,{children:"isLoading.<flowName>"})," boolean.",(0,t.jsx)(s.br,{}),"\n","Subscribe via ",(0,t.jsx)(s.code,{children:"useValues()"})," (e.g. ",(0,t.jsx)(s.code,{children:"const { isLoading } = useValues()"}),") to toggle spinners, disable buttons, or display skeleton screens with zero extra code."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'// Inside React component \n\nimport { useComputed } from "mobx-chunk"\n\nconst isLoading = useComputed(() => authStore.isLoading.yourAsyncFunctionName)\n'})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Select only the pieces of state you need; finer-grained selection means fewer renders."}),"\n",(0,t.jsxs)(s.li,{children:["Use ",(0,t.jsx)(s.code,{children:"useComputed"})," for one-off selectors rather than adding extra computed fields to the store."]}),"\n",(0,t.jsxs)(s.li,{children:["Bind UI loading states directly to ",(0,t.jsx)(s.code,{children:"isLoading"})," flags instead of manual state toggles."]}),"\n",(0,t.jsx)(s.li,{children:"Keep side effects in flows or middleware; aim for declarative UI components."}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>c});var o=n(6540);const t={},r=o.createContext(t);function i(e){const s=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(r.Provider,{value:s},e.children)}}}]);