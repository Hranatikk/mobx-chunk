"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[943],{1855:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"concepts/create-chunk","title":"Create Chunk","description":"The createChunk function is the heart of mobx-chunk, allowing you to define a type-safe store slice (\\"chunk\\") with minimal boilerplate. It automatically generates actions, selectors, async actions, and loading flags based on your configuration and custom definitions.","source":"@site/docs/concepts/create-chunk.md","sourceDirName":"concepts","slug":"/concepts/create-chunk","permalink":"/mobx-chunk/docs/concepts/create-chunk","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Concepts","permalink":"/mobx-chunk/docs/category/concepts"},"next":{"title":"Subscribe to Changes","permalink":"/mobx-chunk/docs/concepts/subscribe-to-changes"}}');var s=t(4848),i=t(8453);const c={sidebar_position:1},r="Create Chunk",a={},l=[{value:"What <code>createChunk</code> Provides",id:"what-createchunk-provides",level:2},{value:"Full Store Definition Example",id:"full-store-definition-example",level:2},{value:"Defining Custom Actions",id:"defining-custom-actions",level:2},{value:"Defining Custom Selectors (Views)",id:"defining-custom-selectors-views",level:2},{value:"Defining Async Actions",id:"defining-async-actions",level:2},{value:"Or define async actions in separated files",id:"or-define-async-actions-in-separated-files",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"create-chunk",children:"Create Chunk"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"createChunk"})," function is the heart of ",(0,s.jsx)(n.strong,{children:"mobx-chunk"}),', allowing you to define a type-safe store slice ("chunk") with minimal boilerplate. It automatically generates actions, selectors, async actions, and loading flags based on your configuration and custom definitions.']}),"\n",(0,s.jsxs)(n.h2,{id:"what-createchunk-provides",children:["What ",(0,s.jsx)(n.code,{children:"createChunk"})," Provides"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Auto-generated Actions"}),": For each key in your state, a ",(0,s.jsx)(n.code,{children:"set${ValueKey}"})," action (e.g., ",(0,s.jsx)(n.code,{children:"setTodoList"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Auto-generated Selectors"}),": For each key in your state, a ",(0,s.jsx)(n.code,{children:"get${ValueKey}"})," selector (e.g., ",(0,s.jsx)(n.code,{children:"getTodoList"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom Async Actions"}),": All your defined async functions live under ",(0,s.jsx)(n.code,{children:"store.asyncActions"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Loading Indicators"}),": ",(0,s.jsx)(n.code,{children:"store.isLoading"})," holds boolean flags for each async action (e.g., ",(0,s.jsx)(n.code,{children:"isLoading.asyncFunctionExample"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Persistence"}),": Opt into persisting fields (e.g., ",(0,s.jsx)(n.code,{children:"todoList"}),") to storage."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"full-store-definition-example",children:"Full Store Definition Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { createChunk, combineAsync } from "mobx-chunk";\nimport { actions, type TActions } from "./actions";\nimport { asyncActions, type TAsyncActions } from "./asyncActions";\nimport { selectors, type TSelectors } from "./selectors";\n\nexport type Todo = {\n  id: number;\n  title: string;\n  isComplete: boolean;\n};\n\nexport type TState = {\n  todoList: Todo[];\n};\n\nexport const todoStore = createChunk<\n  TState,\n  TActions,\n  TAsyncActions,\n  TSelectors\n>({\n  name: "todo",\n  initialState: {\n    todoList: [],\n  } satisfies TState,\n  persist: ["todoList"],\n\n  actions,\n  asyncActions,\n  views: selectors,\n});\n\nexport type TTodoStore = typeof todoStore;\n'})}),"\n",(0,s.jsx)(n.p,{children:"This setup generates:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"todoStore.actions.setTodoList"})," & custom actions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"todoStore.selectors.getTodoList"})," & custom views (selectors in example)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"todoStore.asyncActions.asyncFunctionExample"})," & ",(0,s.jsx)(n.code,{children:"asyncGeneratorExample"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"todoStore.isLoading.asyncFunctionExample"})," & ",(0,s.jsx)(n.code,{children:"asyncGeneratorExample"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"defining-custom-actions",children:"Defining Custom Actions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import type { TState, Todo } from "./chunk";\n\nexport function actions<Store extends TState>(store: Store) {\n  return {\n    addTodo(todo: Todo) {\n      store.todoList = [...store.todoList, todo];\n    },\n    removeTodo(id: number) {\n      store.todoList = store.todoList.filter(i => i.id !== id);\n    },\n  };\n}\nexport type TActions = ReturnType<typeof actions>;\n'})}),"\n",(0,s.jsx)(n.h2,{id:"defining-custom-selectors-views",children:"Defining Custom Selectors (Views)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import type { Todo, TState } from "./chunk";\n\nexport function selectors<Store extends TState>(store: Store) {\n  return {\n    getCompletedTodo(): Todo[] {\n      return store.todoList.filter(i => i.isComplete);\n    },\n  };\n}\nexport type TSelectors = ReturnType<typeof selectors>;\n'})}),"\n",(0,s.jsx)(n.h2,{id:"defining-async-actions",children:"Defining Async Actions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { runInAction } from "mobx-chunk";\nimport type { TState } from "./chunk";\n\nexport function asyncActions<Store extends TState>(store: Store) {\n  return {\n    async asyncFunctionExample() {\n      await new Promise<void>(resolve =>\n        setTimeout(() => {\n          runInAction(() => {\n            store.todoList = []; // simulate result\n          });\n          resolve();\n        }, 7000)\n      );\n    },\n\n    *asyncGeneratorExample() {\n      yield new Promise<void>(resolve =>\n        setTimeout(() => {\n          store.todoList = []; // simulate result\n          resolve();\n        }, 7000)\n      );\n    },\n  };\n}\nexport type TAsyncActions = ReturnType<typeof asyncActions>;\n'})}),"\n",(0,s.jsx)(n.h3,{id:"or-define-async-actions-in-separated-files",children:"Or define async actions in separated files"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { combineAsync } from "mobx-chunk";\nimport type { TState } from "./chunk";\n\nexport const asyncGeneratorExample = (self: TState) => ({\n  *asyncGeneratorExample(payload: { name: string }) {\n    // code goes here\n  },\n})\n\nexport const asyncFunctionExample = (self: TState) => ({\n  async asyncFunctionExample(payload: { namer: string }) {\n    // code goes here\n  },\n})\n\nexport const asyncActions = combineAsync({ asyncGeneratorExample, asyncFunctionExample })\nexport type TAsyncActions = ReturnType<typeof asyncActions>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"createChunk"}),", you get a fully-typed store slice, ready for both simple and complex state management patterns. Copy and adapt these examples to fit your application's needs!"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var o=t(6540);const s={},i=o.createContext(s);function c(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);