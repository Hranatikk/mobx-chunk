"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[834],{5731:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"api/withStore","title":"API: withStore","description":"Higher-order component (HOC) for instantiating a local MobX chunk instance tied to a component\'s lifecycle. The store is created on mount and disposed on unmount, providing isolated state without prop drilling.","source":"@site/docs/api/withStore.md","sourceDirName":"api","slug":"/api/withStore","permalink":"/mobx-chunk/docs/api/withStore","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"API: useComputed","permalink":"/mobx-chunk/docs/api/useComputed"},"next":{"title":"API: combineAsync","permalink":"/mobx-chunk/docs/api/combineAsync"}}');var r=t(4848),s=t(8453);const i={sidebar_position:4},c="API: withStore",a={},l=[{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"api-withstore",children:["API: ",(0,r.jsx)(n.code,{children:"withStore"})]})}),"\n",(0,r.jsx)(n.p,{children:"Higher-order component (HOC) for instantiating a local MobX chunk instance tied to a component's lifecycle. The store is created on mount and disposed on unmount, providing isolated state without prop drilling."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type StoreFactory<S> = S | (() => S)\nfunction withStore<\n  Props,\n  Store\n>(\n  Component: React.ComponentType<Props>,\n  storeOrFactory: StoreFactory<Store>\n): React.FC<Props>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Component"}),": A React component that will consume the local store via hooks (",(0,r.jsx)(n.code,{children:"useValues"}),", ",(0,r.jsx)(n.code,{children:"useComputed"}),", ",(0,r.jsx)(n.code,{children:"useActions"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"storeFactory"}),": A function that returns a new chunk instance (e.g., a ",(0,r.jsx)(n.code,{children:"createChunk"})," call) or an existing store factory function."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A React functional component that wraps ",(0,r.jsx)(n.code,{children:"Component"}),", providing its own store instance via internal context."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Store Instantiation"}),": Calls ",(0,r.jsx)(n.code,{children:"storeFactory()"})," when the wrapper mounts to create a new store instance."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Context Provision"}),": Provides the store instance to all descendant hooks."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cleanup"}),": Disposes the store (and any persistence subscriptions) when the wrapper unmounts."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { useValues, withStore } from "mobx-chunk";\nimport { createChunk } from "mobx-chunk";\n\n// Define a chunk factory\nconst localStoreFactory = () =>\n  createChunk({\n    name: "local",\n    initialState: { count: 0 },\n  });\n\n// Component that uses the local store\nconst Counter = () => {\n  const { count } = useValues({\n    count: () => localStoreFactory().selectors.getCount,\n  });\n\n  return <button onClick={() => localStoreFactory().actions.setCount(count + 1)}>{count}</button>;\n};\n\n// Wrap with HOC to bind a fresh store per mount\nexport default withStore(Counter, localStoreFactory);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"withStore"})," for any component that requires an isolated store instance, such as forms, wizards, or modals."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var o=t(6540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);