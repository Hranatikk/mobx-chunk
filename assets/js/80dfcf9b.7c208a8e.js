"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[263],{8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var o=n(6540);const r={},s=o.createContext(r);function c(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),o.createElement(s.Provider,{value:t},e.children)}},9613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"usage/withStore","title":"withStore","description":"withStore creates a local store instance for a component lifecycle.","source":"@site/docs/usage/withStore.md","sourceDirName":"usage","slug":"/usage/withStore","permalink":"/mobx-chunk/docs/usage/withStore","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"useValues","permalink":"/mobx-chunk/docs/usage/hooks/useValues"},"next":{"title":"API","permalink":"/mobx-chunk/docs/category/api"}}');var r=n(4848),s=n(8453);const c={sidebar_position:1},i="withStore",a={},l=[{value:"Import",id:"import",level:2},{value:"Example",id:"example",level:2}];function u(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"withstore",children:"withStore"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"withStore"})," creates a local store instance for a component lifecycle."]}),"\n",(0,r.jsx)(t.h2,{id:"import",children:"Import"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import { withStore } from 'mobx-chunk'\n"})}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"const MyScreen = ({ store }) => {\n  const { count } = useValues({ count: () => store.count })\n  return <Text>{count}</Text>\n}\n\nexport default withStore(MyScreen, () => createChunk({ name: 'local', state: { count: 0 }, actions: { increment() { this.count++ } } }))\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);