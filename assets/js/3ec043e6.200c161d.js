"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[400],{2051:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api/useChunk","title":"API: useChunk","description":"React hook for creating and managing a local MobX chunk store instance for the lifetime of a component.","source":"@site/docs/api/useChunk.md","sourceDirName":"api","slug":"/api/useChunk","permalink":"/mobx-chunk/docs/api/useChunk","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"API: createChunk","permalink":"/mobx-chunk/docs/api/createChunk"},"next":{"title":"API: useValues","permalink":"/mobx-chunk/docs/api/useValues"}}');var o=s(4848),i=s(8453);const r={sidebar_position:2},c="API: useChunk",a={},l=[{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Example",id:"example",level:2},{value:"When to use",id:"when-to-use",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsxs)(n.h1,{id:"api-usechunk",children:["API: ",(0,o.jsx)(n.code,{children:"useChunk"})]})}),"\n",(0,o.jsxs)(n.p,{children:["React hook for creating and managing a ",(0,o.jsx)(n.strong,{children:"local MobX chunk store instance"})," for the lifetime of a component.\nAutomatically disposes the store when the component unmounts."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"function useChunk<State, Actions, AsyncActions, Selectors>(\n  config: ChunkConfig<State, Actions, AsyncActions, Selectors>,\n  options?: UseChunkOptions\n): StoreInstance<State, Actions, AsyncActions, Selectors> & {\n  dispose?: () => void\n  persistNow?: () => void\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"config"}),": A ",(0,o.jsx)(n.code,{children:"ChunkConfig"})," object describing initial state, actions, async actions, selectors, and persistence options for the store."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"options"})," ",(0,o.jsx)(n.em,{children:"(optional)"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"flushOnUnmount?: boolean"})," \u2014 If ",(0,o.jsx)(n.code,{children:"true"})," (default), calls ",(0,o.jsx)(n.code,{children:"store.persistNow()"})," before disposing, ensuring the latest state is saved."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"onInit?: (store) => void"})," \u2014 Callback invoked once, right after the store is created."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"onDispose?: (store) => void"})," \u2014 Callback invoked right before the store is disposed."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The newly created store instance with all state, actions, async actions, selectors, and utility methods (",(0,o.jsx)(n.code,{children:"dispose"}),", optionally ",(0,o.jsx)(n.code,{children:"persistNow"}),")."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const store = useChunk(config)\n// store.actions, store.asyncActions, store.selectors...\n"})}),"\n",(0,o.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"One instance per mount"})," \u2014 the store is created when the component mounts, and disposed when it unmounts."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Automatic cleanup"})," \u2014 no need to manually call ",(0,o.jsx)(n.code,{children:"dispose()"})," in your components; ",(0,o.jsx)(n.code,{children:"useChunk"})," does it for you."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Optional flush"})," \u2014 ",(0,o.jsx)(n.code,{children:"flushOnUnmount"})," ensures the latest state is persisted before disposing."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { useChunk, useValues } from "mobx-chunk";\nimport { taskConfig } from "./task-config";\n\nconst TaskScreen = () => {\n  // Create a store instance for this screen\n  const store = useChunk(taskConfig, { flushOnUnmount: true });\n\n  // Subscribe to state values\n  const { tasks, isLoading } = useValues({\n    tasks: () => store.selectors.getTaskList,\n    isLoading: () => store.isLoading.fetchTasks\n  });\n\n  React.useEffect(() => {\n    store.asyncActions.fetchTasks();\n  }, [store]);\n\n  if (isLoading) {\n    return <span>Loading...</span>;\n  }\n\n  return (\n    <div>\n      {tasks.map(task => (\n        <p key={task.id}>{task.title}</p>\n      ))}\n    </div>\n  );\n};\n\nexport default TaskScreen;\n'})}),"\n",(0,o.jsx)(n.h2,{id:"when-to-use",children:"When to use"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Use ",(0,o.jsx)(n.code,{children:"useChunk"})," for ",(0,o.jsx)(n.strong,{children:"screen-level or component-level stores"})," that should not persist beyond the component\u2019s lifetime."]}),"\n",(0,o.jsxs)(n.li,{children:["For ",(0,o.jsx)(n.strong,{children:"global stores"})," (app-wide state), create them once in a module and export the instance without using ",(0,o.jsx)(n.code,{children:"useChunk"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var t=s(6540);const o={},i=t.createContext(o);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);