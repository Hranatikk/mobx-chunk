"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[453],{5409:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api/createChunk","title":"API: createChunk","description":"Define a self-contained, type-safe MobX store slice (\\"chunk\\") with optional custom logic, persistence, and async support.","source":"@site/docs/api/createChunk.md","sourceDirName":"api","slug":"/api/createChunk","permalink":"/mobx-chunk/docs/api/createChunk","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"API","permalink":"/mobx-chunk/docs/category/api"},"next":{"title":"API: useChunk","permalink":"/mobx-chunk/docs/api/useChunk"}}');var r=t(4848),i=t(8453);const c={sidebar_position:1},a="API: createChunk",o={},d=[{value:"Type Parameters",id:"type-parameters",level:2},{value:"<code>CreateChunkOptions</code> Interface",id:"createchunkoptions-interface",level:2},{value:"Return Type: <code>Chunk</code>",id:"return-type-chunk",level:2},{value:"Auto-Generated Helpers",id:"auto-generated-helpers",level:3},{value:"Example",id:"example",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"api-createchunk",children:["API: ",(0,r.jsx)(n.code,{children:"createChunk"})]})}),"\n",(0,r.jsx)(n.p,{children:'Define a self-contained, type-safe MobX store slice ("chunk") with optional custom logic, persistence, and async support.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function createChunk<\n  State extends object,\n  Actions extends Record<string, (...args: any[]) => any> = {},\n  AsyncActions extends Record<string, (...args: any[]) => Promise<any> | Generator<any, any, any>> = {},\n  Views extends Record<string, (...args: any[]) => any> = {}\n>(\n  options: CreateChunkOptions<State, Actions, AsyncActions, Views>\n): Chunk<State, Actions, AsyncActions, Views>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"State"})," \u2014 shape of the store\u2019s observable state."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Actions"})," \u2014 custom synchronous action factories (default: ",(0,r.jsx)(n.code,{children:"{}"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"AsyncActions"})," \u2014 custom async action factories (default: ",(0,r.jsx)(n.code,{children:"{}"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Views"})," \u2014 custom selectors / computed factories (default: ",(0,r.jsx)(n.code,{children:"{}"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"createchunkoptions-interface",children:[(0,r.jsx)(n.code,{children:"CreateChunkOptions"})," Interface"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface CreateChunkOptions<\n  State,\n  Actions,\n  AsyncActions,\n  Views\n> {\n  /**\n   * Unique store name used in error messages and persistence keys.\n   */\n  name: string;\n\n  /**\n   * Initial values for the store state.\n   */\n  initialState: State;\n\n  /**\n   * Keys of state fields to persist. Values are serialized via your configured engine.\n   */\n  persist?: Array<keyof State & string>;\n\n  /**\n   * Function returning an object of synchronous actions.\n   */\n  actions?: (store: State) => Actions;\n\n  /**\n   * Function returning an object of async actions or generators.\n   */\n  asyncActions?: (store: State) => AsyncActions;\n\n  /**\n   * Function returning an object of selector (view) functions.\n   */\n  views?: (store: State) => Views;\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"return-type-chunk",children:["Return Type: ",(0,r.jsx)(n.code,{children:"Chunk"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface Chunk<\n  State,\n  Actions,\n  AsyncActions,\n  Views\n> {\n  /**\n   * Observable state.\n   */\n  state: State;\n\n  /**\n   * Auto-generated setters: set${Capitalize<keyof State>}(...).\n   */\n  actions: Actions & AutoSetters<State>;\n\n  /**\n   * Auto-generated getters: get${Capitalize<keyof State>}().\n   */\n  selectors: Views & AutoGetters<State>;\n\n  /**\n   * User-defined async functions under asyncActions.\n   */\n  asyncActions: AsyncActions;\n\n  /**\n   * Loading flags for each async action (boolean).\n   */\n  isLoading: { [K in keyof AsyncActions]: boolean };\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"auto-generated-helpers",children:"Auto-Generated Helpers"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"AutoSetters<State>"})}),": For each ",(0,r.jsx)(n.code,{children:"K in keyof State"}),", adds a method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"set${Capitalize<string & K>}(value: State[K]): void\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"AutoGetters<State>"})}),": For each ",(0,r.jsx)(n.code,{children:"K in keyof State"}),", adds a method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"get${Capitalize<string & K}>(): State[K]\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { createChunk, runInAction } from "mobx-chunk";\n\nexport interface User {\n  id: string;\n  name: string;\n}\n\nexport type UserState = { userList: User[] };\n\nexport const userStore = createChunk<\n  UserState,\n  {},\n  { fetchUsers: () => Promise<void> },\n  {}\n>({\n  name: "user",\n  initialState: { userList: [] },\n  asyncActions: (store) => ({\n    async fetchUsers() {\n      const users = await api.getUsers();\n\n      runInAction(() => {\n        store.actions.setUserList(users);\n      })\n    },\n  }),\n});\n\n// Usage\nuserStore.actions.setUserList([{ id: "1", name: "Alice" }]);\nuserStore.asyncActions.fetchUsers();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["With ",(0,r.jsx)(n.code,{children:"createChunk"}),", you get a fully-typed store slice equipped with auto-generated setters/getters, custom async flows, and loading flags."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);